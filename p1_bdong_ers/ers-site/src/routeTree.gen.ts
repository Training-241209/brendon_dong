/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnauthorizedImport } from './routes/_unauthorized'
import { Route as AuthorizedImport } from './routes/_authorized'
import { Route as IndexImport } from './routes/index'
import { Route as UnauthorizedRegisterImport } from './routes/_unauthorized/register'
import { Route as UnauthorizedLoginImport } from './routes/_unauthorized/login'
import { Route as AuthorizedLogoutImport } from './routes/_authorized/logout'
import { Route as AuthorizedAccountImport } from './routes/_authorized/account'
import { Route as AuthorizedAdminImport } from './routes/_authorized/_admin'
import { Route as AuthorizedAdminUsersImport } from './routes/_authorized/_admin/users'

// Create Virtual Routes

const AuthorizedDashboardLazyImport = createFileRoute(
  '/_authorized/dashboard',
)()
const AuthorizedAdminReimbursementsLazyImport = createFileRoute(
  '/_authorized/_admin/reimbursements',
)()

// Create/Update Routes

const UnauthorizedRoute = UnauthorizedImport.update({
  id: '/_unauthorized',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizedRoute = AuthorizedImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizedDashboardLazyRoute = AuthorizedDashboardLazyImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthorizedRoute,
} as any).lazy(() =>
  import('./routes/_authorized/dashboard.lazy').then((d) => d.Route),
)

const UnauthorizedRegisterRoute = UnauthorizedRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => UnauthorizedRoute,
} as any)

const UnauthorizedLoginRoute = UnauthorizedLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => UnauthorizedRoute,
} as any)

const AuthorizedLogoutRoute = AuthorizedLogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => AuthorizedRoute,
} as any)

const AuthorizedAccountRoute = AuthorizedAccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => AuthorizedRoute,
} as any)

const AuthorizedAdminRoute = AuthorizedAdminImport.update({
  id: '/_admin',
  getParentRoute: () => AuthorizedRoute,
} as any)

const AuthorizedAdminReimbursementsLazyRoute =
  AuthorizedAdminReimbursementsLazyImport.update({
    id: '/reimbursements',
    path: '/reimbursements',
    getParentRoute: () => AuthorizedAdminRoute,
  } as any).lazy(() =>
    import('./routes/_authorized/_admin/reimbursements.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthorizedAdminUsersRoute = AuthorizedAdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthorizedAdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authorized': {
      id: '/_authorized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthorizedImport
      parentRoute: typeof rootRoute
    }
    '/_unauthorized': {
      id: '/_unauthorized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthorizedImport
      parentRoute: typeof rootRoute
    }
    '/_authorized/_admin': {
      id: '/_authorized/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthorizedAdminImport
      parentRoute: typeof AuthorizedImport
    }
    '/_authorized/account': {
      id: '/_authorized/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AuthorizedAccountImport
      parentRoute: typeof AuthorizedImport
    }
    '/_authorized/logout': {
      id: '/_authorized/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof AuthorizedLogoutImport
      parentRoute: typeof AuthorizedImport
    }
    '/_unauthorized/login': {
      id: '/_unauthorized/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UnauthorizedLoginImport
      parentRoute: typeof UnauthorizedImport
    }
    '/_unauthorized/register': {
      id: '/_unauthorized/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof UnauthorizedRegisterImport
      parentRoute: typeof UnauthorizedImport
    }
    '/_authorized/dashboard': {
      id: '/_authorized/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthorizedDashboardLazyImport
      parentRoute: typeof AuthorizedImport
    }
    '/_authorized/_admin/users': {
      id: '/_authorized/_admin/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthorizedAdminUsersImport
      parentRoute: typeof AuthorizedAdminImport
    }
    '/_authorized/_admin/reimbursements': {
      id: '/_authorized/_admin/reimbursements'
      path: '/reimbursements'
      fullPath: '/reimbursements'
      preLoaderRoute: typeof AuthorizedAdminReimbursementsLazyImport
      parentRoute: typeof AuthorizedAdminImport
    }
  }
}

// Create and export the route tree

interface AuthorizedAdminRouteChildren {
  AuthorizedAdminUsersRoute: typeof AuthorizedAdminUsersRoute
  AuthorizedAdminReimbursementsLazyRoute: typeof AuthorizedAdminReimbursementsLazyRoute
}

const AuthorizedAdminRouteChildren: AuthorizedAdminRouteChildren = {
  AuthorizedAdminUsersRoute: AuthorizedAdminUsersRoute,
  AuthorizedAdminReimbursementsLazyRoute:
    AuthorizedAdminReimbursementsLazyRoute,
}

const AuthorizedAdminRouteWithChildren = AuthorizedAdminRoute._addFileChildren(
  AuthorizedAdminRouteChildren,
)

interface AuthorizedRouteChildren {
  AuthorizedAdminRoute: typeof AuthorizedAdminRouteWithChildren
  AuthorizedAccountRoute: typeof AuthorizedAccountRoute
  AuthorizedLogoutRoute: typeof AuthorizedLogoutRoute
  AuthorizedDashboardLazyRoute: typeof AuthorizedDashboardLazyRoute
}

const AuthorizedRouteChildren: AuthorizedRouteChildren = {
  AuthorizedAdminRoute: AuthorizedAdminRouteWithChildren,
  AuthorizedAccountRoute: AuthorizedAccountRoute,
  AuthorizedLogoutRoute: AuthorizedLogoutRoute,
  AuthorizedDashboardLazyRoute: AuthorizedDashboardLazyRoute,
}

const AuthorizedRouteWithChildren = AuthorizedRoute._addFileChildren(
  AuthorizedRouteChildren,
)

interface UnauthorizedRouteChildren {
  UnauthorizedLoginRoute: typeof UnauthorizedLoginRoute
  UnauthorizedRegisterRoute: typeof UnauthorizedRegisterRoute
}

const UnauthorizedRouteChildren: UnauthorizedRouteChildren = {
  UnauthorizedLoginRoute: UnauthorizedLoginRoute,
  UnauthorizedRegisterRoute: UnauthorizedRegisterRoute,
}

const UnauthorizedRouteWithChildren = UnauthorizedRoute._addFileChildren(
  UnauthorizedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthorizedAdminRouteWithChildren
  '/account': typeof AuthorizedAccountRoute
  '/logout': typeof AuthorizedLogoutRoute
  '/login': typeof UnauthorizedLoginRoute
  '/register': typeof UnauthorizedRegisterRoute
  '/dashboard': typeof AuthorizedDashboardLazyRoute
  '/users': typeof AuthorizedAdminUsersRoute
  '/reimbursements': typeof AuthorizedAdminReimbursementsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthorizedAdminRouteWithChildren
  '/account': typeof AuthorizedAccountRoute
  '/logout': typeof AuthorizedLogoutRoute
  '/login': typeof UnauthorizedLoginRoute
  '/register': typeof UnauthorizedRegisterRoute
  '/dashboard': typeof AuthorizedDashboardLazyRoute
  '/users': typeof AuthorizedAdminUsersRoute
  '/reimbursements': typeof AuthorizedAdminReimbursementsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authorized': typeof AuthorizedRouteWithChildren
  '/_unauthorized': typeof UnauthorizedRouteWithChildren
  '/_authorized/_admin': typeof AuthorizedAdminRouteWithChildren
  '/_authorized/account': typeof AuthorizedAccountRoute
  '/_authorized/logout': typeof AuthorizedLogoutRoute
  '/_unauthorized/login': typeof UnauthorizedLoginRoute
  '/_unauthorized/register': typeof UnauthorizedRegisterRoute
  '/_authorized/dashboard': typeof AuthorizedDashboardLazyRoute
  '/_authorized/_admin/users': typeof AuthorizedAdminUsersRoute
  '/_authorized/_admin/reimbursements': typeof AuthorizedAdminReimbursementsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/account'
    | '/logout'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/users'
    | '/reimbursements'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/account'
    | '/logout'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/users'
    | '/reimbursements'
  id:
    | '__root__'
    | '/'
    | '/_authorized'
    | '/_unauthorized'
    | '/_authorized/_admin'
    | '/_authorized/account'
    | '/_authorized/logout'
    | '/_unauthorized/login'
    | '/_unauthorized/register'
    | '/_authorized/dashboard'
    | '/_authorized/_admin/users'
    | '/_authorized/_admin/reimbursements'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthorizedRoute: typeof AuthorizedRouteWithChildren
  UnauthorizedRoute: typeof UnauthorizedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthorizedRoute: AuthorizedRouteWithChildren,
  UnauthorizedRoute: UnauthorizedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authorized",
        "/_unauthorized"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authorized": {
      "filePath": "_authorized.tsx",
      "children": [
        "/_authorized/_admin",
        "/_authorized/account",
        "/_authorized/logout",
        "/_authorized/dashboard"
      ]
    },
    "/_unauthorized": {
      "filePath": "_unauthorized.tsx",
      "children": [
        "/_unauthorized/login",
        "/_unauthorized/register"
      ]
    },
    "/_authorized/_admin": {
      "filePath": "_authorized/_admin.tsx",
      "parent": "/_authorized",
      "children": [
        "/_authorized/_admin/users",
        "/_authorized/_admin/reimbursements"
      ]
    },
    "/_authorized/account": {
      "filePath": "_authorized/account.tsx",
      "parent": "/_authorized"
    },
    "/_authorized/logout": {
      "filePath": "_authorized/logout.tsx",
      "parent": "/_authorized"
    },
    "/_unauthorized/login": {
      "filePath": "_unauthorized/login.tsx",
      "parent": "/_unauthorized"
    },
    "/_unauthorized/register": {
      "filePath": "_unauthorized/register.tsx",
      "parent": "/_unauthorized"
    },
    "/_authorized/dashboard": {
      "filePath": "_authorized/dashboard.lazy.tsx",
      "parent": "/_authorized"
    },
    "/_authorized/_admin/users": {
      "filePath": "_authorized/_admin/users.tsx",
      "parent": "/_authorized/_admin"
    },
    "/_authorized/_admin/reimbursements": {
      "filePath": "_authorized/_admin/reimbursements.lazy.tsx",
      "parent": "/_authorized/_admin"
    }
  }
}
ROUTE_MANIFEST_END */
